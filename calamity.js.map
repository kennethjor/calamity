{"version":3,"sources":["calamity/EmitterMixin.coffee","calamity/EventBridge.coffee","calamity/EventBus.coffee","calamity/EventMessage.coffee","calamity/MemoryEventBridge.coffee","calamity/ProxyMixin.coffee","calamity/Subscription.coffee","calamity/util.coffee"],"names":[],"mappings":"AAGA;AAAA,MAAA,wKAAA;IAAA;mSAAA;;AAAA,EAAA,YAAA,GAAA,CAAA,CAAA;8BAGA;;AAAA,2BAAA,EAAA,GAAA,SAAA,OAAA,EAAA,OAAA,EAAA,OAAA,GAAA;AACA,MAAA,YAAA,UAAA,KAAA,CAAA;AACA,aAAA,aAAA,CAAA,IAAA,CAAA,CAAA,SAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAFA;IAAA,CAAA,CAAA;;AAAA,2BAMA,GAAA,GAAA,SAAA,OAAA,EAAA,OAAA,EAAA,OAAA,GAAA;AACA,MAAA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,cAAA,CAAA;OAAA;AAAA,MACA,YAAA,UAAA,KADA,CAAA;AAEA,aAAA,aAAA,CAAA,IAAA,CAAA,CAAA,WAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAHA;IAAA,CANA,CAAA;;AAAA,2BAaA,OAAA,GAAA,SAAA,OAAA,EAAA,IAAA,EAAA,KAAA,GAAA;AACA,MAAA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,cAAA,CAAA;OAAA;AACA,aAAA,aAAA,CAAA,IAAA,CAAA,CAAA,OAAA,CAAA,OAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAFA;IAAA,CAbA,CAAA;;wBAAA;;MAHA,CAAA;;AAAA,EAqBA,aAAA,GAAA,SAAA,GAAA,GAAA;AACA,IAAA,IAAA,CAAA,GAAA,CAAA,SAAA;AAAA,aAAA,KAAA,CAAA;KAAA;AACA,IAAA,IAAA,CAAA,GAAA,CAAA,SAAA,CAAA,OAAA;AAAA,aAAA,KAAA,CAAA;KADA;AAEA,IAAA,IAAA,CAAA,GAAA,CAAA,SAAA,CAAA,OAAA,CAAA,GAAA;AAAA,aAAA,KAAA,CAAA;KAFA;AAGA,WAAA,IAAA,CAJA;EAAA,CArBA,CAAA;;AAAA,EA4BA,aAAA,GAAA,SAAA,GAAA,GAAA;AACA,QAAA,iBAAA;AAAA,IAAA,QAAA,GAAA,CAAA,GAAA,CAAA,cAAA,GAAA,CAAA,YAAA,GAAA,CAAA,CAAA;AAAA,IACA,OAAA,GAAA,CAAA,QAAA,CAAA,YAAA,QAAA,CAAA,UAAA,GAAA,CADA,CAAA;AAEA,WAAA,OAAA,CAAA,QAAA,OAAA,CAAA,MAAA,IAAA,QAAA,CAAA,EAAA,CAHA;EAAA,CA5BA,CAAA;;AAAA,EAoCA,CAAA,CAAA,OAAA,GAAA,SAAA,GAAA,GAAA;WACA,CAAA,CAAA,MAAA,CAAA,GAAA,EAAA,YAAA,CAAA,SAAA,EADA;EAAA,CApCA,CAAA;;AAAA,ECeA,WAAA,GAAA,CAAA,CAAA;AACA,IAAA,CAAA,CAAA,OAAA,CAAA,WAAA,CAAA,SAAA,CAAA,CAAA;;AAEA,IAAA,qBAAA,GAAA,CAFA;;uBAAA;;MDhBA,CAAA;;AAAA,EEDA,QAAA,GAAA,CAAA,CAAA;AACA,IAAA,kBAAA,GAAA;AAEA,MAAA,IAAA,CAAA,EAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAEA,IAAA,CAAA,cAAA,GAAA,EAFA,CAAA;AAAA,MAIA,IAAA,CAAA,QAAA,GAAA,EAJA,CAFA;IAAA,CAAA;;AAAA,uBAUA,SAAA,GAAA,SAAA,OAAA,EAAA,OAAA,EAAA,OAAA,GAAA;AAEA,UAAA,GAAA;AAAA,MAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA;AACA,QAAA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CADA;OAAA;AAAA,MAGA,GAAA,GAAA,IAAA,YAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,IAAA,CAHA,CAAA;AAAA,MAKA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CALA,CAAA;AAAA,MAOA,IAAA,CAAA,WAAA,CAAA,WAAA,EAAA;AAAA,QAAA,YAAA,EAAA,GAAA;OAAA,CAPA,CAAA;AASA,aAAA,GAAA,CAXA;IAAA,CAVA,CAAA;;AAAA,uBAyBA,WAAA,GAAA,SAAA,OAAA,EAAA,OAAA,GAAA;AACA,UAAA,2CAAA;AAAA,MAAA,GAAA,GAAA,OAAA,CAAA;AAEA,MAAA,IAAA,GAAA,YAAA,YAAA;AAEA,QAAA,OAAA,GAAA,GAAA,CAAA,OAAA,CAAA;AACA,QAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA;AAAA,gBAAA,CAAA;SADA;AAEA;AAAA,aAAA,mDAAA;sBAAA;AACA,UAAA,IAAA,CAAA,KAAA,GAAA;AACA,YAAA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CADA;WADA;AAAA,SAJA;OAAA,MAAA;AAUA,QAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA;AAAA,gBAAA,CAAA;SAAA;AACA;AAAA,aAAA,sDAAA;uBAAA;AACA,UAAA,IAAA,CAAA,CAAA,OAAA,KAAA,OAAA,IAAA,CAAA,CAAA,OAAA,KAAA,OAAA;AACA,YAAA,GAAA,GAAA,CAAA,CAAA;AAAA,YACA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CADA,CADA;WADA;AAAA,SAXA;OAFA;AAAA,MAkBA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA;AAAA,QAAA,YAAA,EAAA,GAAA;OAAA,CAlBA,CADA;IAAA,CAzBA,CAAA;;AAAA,uBAiDA,OAAA,GAAA,SAAA,OAAA,EAAA,IAAA,EAAA,KAAA,GAAA;AACA,UAAA,GAAA;AAAA,MAAA,GAAA,GAAA,IAAA,CAAA,cAAA,CAAA,OAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AAAA,MACA,OAAA,GAAA,GAAA,CAAA,OADA,CAAA;AAGA,MAAA,IAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AAAA,eAAA,IAAA,CAAA;OAHA;AAAA,MAKA,GAAA,CAAA,MAAA,CAAA,IAAA,CALA,CAAA;AAAA,MAOA,IAAA,CAAA,eAAA,CAAA,OAAA,EAAA,GAAA,CAPA,CAAA;AAAA,MASA,IAAA,CAAA,eAAA,CAAA,GAAA,EAAA,GAAA,CATA,CAAA;AAAA,MAWA,IAAA,CAAA,WAAA,CAAA,SAAA,EAAA;AAAA,QAAA,OAAA,EAAA,GAAA;OAAA,CAXA,CAAA;AAaA,aAAA,IAAA,CAdA;IAAA,CAjDA,CAAA;;AAAA,uBAoEA,IAAA,GAAA,SAAA,OAAA,EAAA,IAAA,EAAA,KAAA,GAAA;AACA,UAAA,GAAA;AAAA,MAAA,GAAA,GAAA,IAAA,CAAA,cAAA,CAAA,OAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AAAA,MACA,OAAA,GAAA,GAAA,CAAA,OADA,CAAA;AAGA,MAAA,IAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AAAA,eAAA,IAAA,CAAA;OAHA;AAAA,MAKA,GAAA,CAAA,MAAA,CAAA,IAAA,CALA,CAAA;AAAA,MAOA,IAAA,CAAA,YAAA,CAAA,OAAA,EAAA,GAAA,CAPA,CAAA;AAAA,MASA,IAAA,CAAA,WAAA,CAAA,MAAA,EAAA;AAAA,QAAA,OAAA,EAAA,GAAA;OAAA,CATA,CAAA;AAWA,aAAA,IAAA,CAZA;IAAA,CApEA,CAAA;;AAAA,uBAqFA,MAAA,GAAA,SAAA,MAAA,GAAA;AACA,MAAA,IAAA,CAAA,CAAA,MAAA,YAAA,WAAA,CAAA;AAAA,cAAA,IAAA,KAAA,CAAA,yCAAA,CAAA,CAAA;OAAA;AACA,MAAA,IAAA,CAAA,CAAA,CAAA,QAAA,CAAA,IAAA,CAAA,QAAA,EAAA,MAAA,CAAA;AAAA,QAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;OADA;AAEA,aAAA,IAAA,CAHA;IAAA,CArFA,CAAA;;AAAA,uBA2FA,cAAA,GAAA,SAAA,OAAA,EAAA,IAAA,EAAA,KAAA,GAAA;AAEA,UAAA,GAAA;AAAA,MAAA,GAAA,GAAA,OAAA,CAAA;AACA,MAAA,IAAA,CAAA,CAAA,GAAA,YAAA,YAAA,CAAA;AACA,QAAA,GAAA,GAAA,IAAA,YAAA,CAAA,OAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CADA;OADA;AAGA,aAAA,GAAA,CALA;IAAA,CA3FA,CAAA;;AAAA,uBAmGA,eAAA,GAAA,SAAA,OAAA,EAAA,GAAA,GAAA;AAEA,UAAA,4BAAA;AAAA,MAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA;AAAA,cAAA,CAAA;OAAA;AAEA;AAAA,WAAA,2CAAA;gCAAA;AACA,QAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CADA;AAAA,OAJA;IAAA,CAnGA,CAAA;;AAAA,uBA4GA,YAAA,GAAA,SAAA,OAAA,EAAA,GAAA,GAAA;AAEA,UAAA,YAAA;AAAA,MAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA;AAAA,cAAA,CAAA;OAAA;AAAA,MAEA,IAAA,GAAA,IAAA,CAAA,cAAA,CAAA,OAAA,CAFA,CAAA;AAAA,MAGA,GAAA,GAAA,IAAA,CAAA,MAHA,CAAA;AAAA,MAIA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,GAAA,GAAA,CAJA,CAAA;AAAA,MAKA,IAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,GAAA,CALA,CAFA;IAAA,CA5GA,CAAA;;AAAA,uBAuHA,WAAA,GAAA,SAAA,IAAA,EAAA,IAAA,GAAA;AACA,UAAA,0BAAA;AAAA,MAAA,IAAA,CAAA,CAAA,IAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AAAA,cAAA,CAAA;OAAA;AAAA,MACA,OAAA,GAAA,MAAA,GAAA,IADA,CAAA;AAAA,MAEA,IAAA,CAAA,GAAA,GAAA,IAFA,CAAA;AAGA;AAAA,WAAA,2CAAA;qBAAA;AACA,QAAA,CAAA,CAAA,OAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CADA;AAAA,OAJA;IAAA,CAvHA,CAAA;;oBAAA;;MFAA,CAAA;;AAAA,EGDA,YAAA,GAAA,CAAA,CAAA;AAEA,IAAA,sBAAA,OAAA,EAAA,IAAA,EAAA,YAAA,GAAA;AAEA,MAFA,IAAA,CAAA,UAAA,OAEA,CAAA;AAAA,MAFA,IAAA,CAAA,sBAAA,OAAA,EAEA,CAAA;AAAA,MAAA,IAAA,CAAA,EAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAGA,IAAA,CAAA,OAAA,GAAA,EAHA,CAAA;AAKA,MAAA,IAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAAA,UAAA,CAAA,YAAA,CAAA,CAAA;AACA,cAAA,IAAA,KAAA,CAAA,0BAAA,CAAA,CADA;OALA;AAAA,MAOA,IAAA,CAAA,aAAA,GAAA,YAPA,CAAA;AAAA,MASA,IAAA,CAAA,MAAA,GAAA,IATA,CAAA;AAAA,MAUA,IAAA,CAAA,KAAA,GAAA,IAVA,CAFA;IAAA,CAAA;;AAAA,2BAgBA,KAAA,GAAA,SAAA,IAAA,EAAA,OAAA,GAAA;AACA,UAAA,YAAA;AAAA,MAAA,YAAA,GAAA,IAAA,CAAA,aAAA,CAAA;AAEA,MAAA,IAAA,CAAA,CAAA,CAAA,UAAA,CAAA,YAAA,CAAA;AAAA,cAAA,CAAA;OAFA;AAIA,MAAA,IAAA,CAAA,CAAA,IAAA,YAAA,YAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,YAAA,CAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA,CADA;OAJA;AAAA,MAOA,YAAA,CAAA,IAAA,CAPA,CAAA;AAWA,aAAA,IAAA,CAZA;IAAA,CAhBA,CAAA;;AAAA,2BAgCA,UAAA,GAAA,SAAA,KAAA,EAAA,IAAA,GAAA;AAEA,UAAA,2BAAA;;QAFA,OAAA;OAEA;AAAA,MAAA,IAAA,KAAA,YAAA,KAAA;AAEA;AAAA,aAAA,2CAAA;uBAAA;AACA,UAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,IAAA,MAAA,CAAA,GAAA,CAAA,QAAA,KAAA,UAAA;AAAA,YAAA,GAAA,GAAA,GAAA,CAAA,QAAA,CAAA,CAAA,CAAA;WADA;AAAA,UAEA,IAAA,CAAA,CAAA,CAAA,GAAA,GAFA,CADA;AAAA,SAAA;AAIA,QAAA,IAAA,MAAA,CAAA,KAAA,CAAA,QAAA,KAAA,UAAA;AACA,UAAA,IAAA,CAAA,MAAA,GAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA;AAAA,UACA,KAAA,GAAA,IAAA,CAAA,MADA,CAAA;AAEA,UAAA,IAAA,IAAA,CAAA,KAAA;AACA,YAAA,KAAA,IAAA,MAAA,GAAA,IAAA,CAAA,KAAA,CADA;WAHA;SANA;OAAA;AAAA,MAYA,GAAA,GAAA,IAAA,YAAA,CAAA,IAAA,EAAA,IAAA,CAZA,CAAA;AAAA,MAaA,GAAA,CAAA,MAAA,GAAA,OAbA,CAAA;AAAA,MAcA,GAAA,CAAA,KAAA,GAAA,KAdA,CAAA;AAAA,MAgBA,IAAA,CAAA,KAAA,CAAA,GAAA,CAhBA,CAAA;AAiBA,aAAA,IAAA,CAnBA;IAAA,CAhCA,CAAA;;AAAA,2BAiEA,QAAA,GAAA,SAAA,KAAA,EAAA,OAAA,GAAA;AACA,UAAA,GAAA;AAAA,MAAA,IAAA,eAAA;AACA,QAAA,IAAA,CAAA,CAAA,CAAA,UAAA,CAAA,KAAA,CAAA;AACA,gBAAA,IAAA,KAAA,CAAA,sCAAA,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,GAAA,WAAA,CAAA,CADA;SAAA;AAAA,QAEA,OAAA,GAAA,KAFA,CAAA;AAAA,QAGA,KAAA,GAAA,MAHA,CADA;OAAA;AAMA,MAAA,IAAA,CAAA,CAAA,CAAA,UAAA,CAAA,IAAA,CAAA,aAAA,CAAA;AAEA,QAAA,IAAA,aAAA;AACA,UAAA,IAAA,KAAA,YAAA,YAAA;AACA,YAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA;AACA,oBAAA,KAAA,CAAA,KAAA,CADA;aADA;WAAA,MAAA;AAIA,YAAA,IAAA,CAAA,CAAA,KAAA,YAAA,KAAA,CAAA;AAAA,cAAA,KAAA,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,CAAA;aAAA;AACA,kBAAA,KAAA,CALA;WADA;SAAA;AAAA,QAQA,OAAA,CAAA,KAAA,CARA,CAFA;OAAA,MAAA;AAcA,QAAA,IAAA,aAAA;AACA,UAAA,IAAA,KAAA,YAAA,YAAA;AACA,YAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA;AACA,cAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA;AACA,oBAAA,CAFA;aADA;WAAA,MAAA;AAKA,YAAA,IAAA,CAAA,CAAA,KAAA,YAAA,KAAA,CAAA;AAAA,cAAA,KAAA,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,CAAA;aAAA;AAAA,YACA,IAAA,CAAA,UAAA,CAAA,KAAA,CADA,CAAA;AAEA,kBAAA,CAPA;WADA;SAAA;AAUA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,CADA;SAAA,cAAA;AAGA,UADA,YACA,CAAA;AAAA,UAAA,IAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAHA;SAxBA;OAPA;IAAA,CAjEA,CAAA;;AAAA,2BAwGA,SAAA,GAAA,SAAA,GAAA;AACA,aAAA,IAAA,CAAA,MAAA,KAAA,IAAA,CADA;IAAA,CAxGA,CAAA;;AAAA,2BA6GA,OAAA,GAAA,SAAA,GAAA;AACA,aAAA,IAAA,CAAA,MAAA,KAAA,OAAA,CADA;IAAA,CA7GA,CAAA;;AAAA,2BAkHA,WAAA,GAAA,SAAA,KAAA,EAAA,GAAA,GAAA;AACA,UAAA,gCAAA;AAAA,MAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA;AAAA,MACA,GAAA,GAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CADA,CAAA;AAGA,MAAA,IAAA,KAAA,CAAA,MAAA,GAAA,CAAA;AAAA;AAAA,aAAA,2CAAA;0BAAA;AACA,UAAA,IAAA,CAAA,CAAA,QAAA,CAAA,GAAA,CAAA,IAAA,mBAAA;AACA,YAAA,GAAA,GAAA,GAAA,CAAA,IAAA,CAAA,CADA;WAAA,MAAA;AAGA,YAAA,GAAA,GAAA,MAAA,CAAA;AACA,kBAJA;WADA;AAAA,SAAA;OAHA;AAUA,MAAA,IAAA,MAAA,CAAA,GAAA,KAAA,WAAA;AACA,eAAA,GAAA,CADA;OAVA;AAYA,aAAA,GAAA,CAbA;IAAA,CAlHA,CAAA;;AAAA,2BAmIA,WAAA,GAAA,SAAA,KAAA,GAAA;AACA,UAAA,GAAA;AAAA,MAAA,GAAA,GAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA;AACA,MAAA,IAAA,MAAA,CAAA,GAAA,KAAA,WAAA;AACA,cAAA,IAAA,KAAA,CAAA,aAAA,GAAA,KAAA,GAAA,yCAAA,GAAA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,CADA;OADA;AAGA,aAAA,GAAA,CAJA;IAAA,CAnIA,CAAA;;AAAA,2BA2IA,MAAA,GAAA,SAAA,GAAA,GAAA;AACA,MAAA,IAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA;AAAA,eAAA,IAAA,CAAA;OAAA;AAAA,MACA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CADA,CAAA;AAEA,aAAA,IAAA,CAHA;IAAA,CA3IA,CAAA;;AAAA,2BAkJA,MAAA,GAAA,SAAA,GAAA,GAAA;AACA,aAAA,CAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CADA;IAAA,CAlJA,CAAA;;AAAA,2BAuJA,MAAA,GAAA,SAAA,GAAA;AACA,UAAA,IAAA;AAAA,MAAA,IAAA,GACA;AAAA,QAAA,QAAA,EAAA,CAAA,CAAA,OAAA;AAAA,QACA,OAAA,EAAA,IAAA,CAAA,OADA;AAAA,QAEA,IAAA,EAAA,IAAA,CAAA,IAFA;AAAA,QAGA,MAAA,EAAA,IAAA,CAAA,MAHA;AAAA,QAIA,KAAA,EAAA,IAAA,CAAA,KAJA;OADA,CAAA;AAMA,MAAA,IAAA,0BAAA;AACA,QAAA,IAAA,CAAA,KAAA,GAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,EAAA,IAAA,CAAA,CADA;OANA;AAQA,aAAA,IAAA,CATA;IAAA,CAvJA,CAAA;;AAAA,IAqKA,YAAA,CAAA,QAAA,GAAA,SAAA,IAAA,GAAA;AACA,UAAA,GAAA;AAAA,MAAA,IAAA,CAAA,CAAA,CAAA,QAAA,CAAA,IAAA,CAAA;AAAA,cAAA,IAAA,KAAA,CAAA,wBAAA,CAAA,CAAA;OAAA;AACA,MAAA,IAAA,qBAAA;AAAA,cAAA,IAAA,KAAA,CAAA,uCAAA,GAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;OADA;AAAA,MAEA,GAAA,GAAA,IAAA,YAAA,CAAA,IAAA,CAAA,OAAA,EAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,KAAA,CAFA,CAAA;AAAA,MAGA,GAAA,CAAA,MAAA,GAAA,IAAA,CAAA,MAHA,CAAA;AAAA,MAIA,GAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAJA,CAAA;AAKA,aAAA,GAAA,CANA;IAAA,CArKA,CAAA;;wBAAA;;MHDA,CAAA;;AAAA,EIDA,iBAAA,GAAA,CAAA,CAAA;AAGA,wCAAA,CAAA;;;;KAAA;;AAAA,gCAAA,OAAA,GAAA,SAAA,GAAA,GAAA;AAGA,UAAA,mBAAA;AAAA;AAAA,WAAA,2CAAA;uBAAA;AACA,QAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CADA;AAAA,OAHA;IAAA,CAAA,CAAA;;6BAAA;;KAHA,YJCA,CAAA;;AAAA,EKCA,UAAA,GAAA,CAAA,CAAA;4BAGA;;AAAA,yBAAA,SAAA,GAAA,SAAA,OAAA,EAAA,OAAA,GAAA;AACA,aAAA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAAA,SAAA,CAAA,OAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CADA;IAAA,CAAA,CAAA;;AAAA,yBAKA,OAAA,GAAA,SAAA,OAAA,EAAA,IAAA,EAAA,KAAA,GAAA;AACA,aAAA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAAA,OAAA,CAAA,OAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CADA;IAAA,CALA,CAAA;;AAAA,yBAUA,IAAA,GAAA,SAAA,OAAA,EAAA,IAAA,EAAA,KAAA,GAAA;AACA,aAAA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CADA;IAAA,CAVA,CAAA;;sBAAA;;MLJA,CAAA;;AAAA,EKkBA,gBAAA,GAAA,ILlBA,CAAA;;AAAA,EKmBA,CAAA,CAAA,MAAA,GAAA,SAAA,GAAA;AACA,IAAA,qBAAA,mBAAA,IAAA,QAAA,CAAA,EAAA,CAAA;AACA,WAAA,gBAAA,CAFA;EAAA,CLnBA,CAAA;;AAAA,EKyBA,CAAA,CAAA,KAAA,GAAA,SAAA,GAAA,EAAA,GAAA,GAAA;AAEA,QAAA,CAAA;AAAA,IAAA,IAAA,CAAA,CAAA,GAAA,YAAA,QAAA,CAAA;AACA,MAAA,GAAA,GAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CADA;KAAA;AAAA,IAGA,CAAA,GAAA,CAAA,GAAA,CAAA,cAAA,GAAA,CAAA,YAAA,GAAA,CAHA,CAAA;AAAA,IAIA,CAAA,CAAA,KAAA,GACA;AAAA,MAAA,GAAA,EAAA,GAAA;KALA,CAAA;WAOA,CAAA,CAAA,MAAA,CAAA,GAAA,EAAA,UAAA,CAAA,SAAA,EATA;EAAA,CLzBA,CAAA;;AAAA,EMDA,YAAA,GAAA,CAAA,CAAA;AAEA,IAAA,sBAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,GAAA,GAAA;AACA,MADA,IAAA,CAAA,UAAA,OACA,CAAA;AAAA,MADA,IAAA,CAAA,UAAA,OACA,CAAA;AAAA,MADA,IAAA,CAAA,UAAA,OACA,CAAA;AAAA,MADA,IAAA,CAAA,MAAA,GACA,CAAA;AAAA,MAAA,IAAA,CAAA,EAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MACA,IAAA,CAAA,MAAA,GAAA,IADA,CAAA;AAEA,YAAA,CAHA;IAAA,CAAA;;AAAA,2BAOA,WAAA,GAAA,SAAA,GAAA;AACA,MAAA,IAAA,CAAA,IAAA,CAAA,MAAA;AAAA,cAAA,CAAA;OAAA;AAAA,MACA,IAAA,CAAA,GAAA,CAAA,WAAA,CAAA,IAAA,CADA,CAAA;AAAA,MAEA,IAAA,CAAA,MAAA,GAAA,KAFA,CAAA;AAGA,aAAA,IAAA,CAJA;IAAA,CAPA,CAAA;;AAAA,2BAeA,OAAA,GAAA,SAAA,GAAA,GAAA;AACA,UAAA,KAAA;AAAA,MAAA,IAAA,CAAA,IAAA,CAAA,MAAA;AAAA,eAAA,IAAA,CAAA;OAAA;AAAA,MAEA,KAAA,GAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA,IAAA,CAAA,OAAA,CAFA,CAAA;AAAA,MAIA,KAAA,CAAA,GAAA,CAJA,CAAA;AASA,aAAA,IAAA,CAVA;IAAA,CAfA,CAAA;;wBAAA;;MNDA,CAAA;;AAAA,EOCA,MAAA,GAAA,IAAA,CAAA,MPDA,CAAA;;AAAA,EOEA,KAAA,GAAA,IAAA,CAAA,KPFA,CAAA;;AAAA,EOKA,GAAA,GAAA,kBAAA,CAAA,KAAA,CAAA,EAAA,CPLA,CAAA;;AAAA,EOQA,IAAA,GAAA,CAAA,CAAA,IAAA,GAEA;AAAA,IAAA,KAAA,EAAA,SAAA,GAAA;AACA,UAAA,SAAA;AAAA,MAAA,EAAA,GAAA,EAAA,CAAA;AACA,WAAA,8BAAA,GAAA;AACA,QAAA,EAAA,IAAA,GAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,GAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CADA;AAAA,OADA;AAGA,aAAA,EAAA,CAJA;IAAA,CAAA;GPVA,CAAA;AAAA","file":"calamity.js","sourceRoot":"/calamity","sourcesContent":["# # EmitterMixin\n# Mixin class for attaching an instance-local EventBus to objects.\n# It adds the `on()`, `off()`, and `_trigger()` methods to the object.\nEmitterMixin = class C.EmitterMixin\n\t# ## `on()`\n\t# Register a handler to an address.\n\ton: (address, handler, context) ->\n\t\tcontext or= @\n\t\treturn getEmitterBus(@).subscribe(address, handler, context)\n\n\t# ## `off()`\n\t# Unregisters a handler from an address.\n\toff: (address, handler, context) ->\n\t\treturn unless hasEmitterBus(@)\n\t\tcontext or= @\n\t\treturn getEmitterBus(@).unsubscribe(address, handler, context)\n\n\t# ## `_trigger()`\n\t# Publishes an event to an address.\n\ttrigger: (address, data, reply) ->\n\t\treturn unless hasEmitterBus(@)\n\t\treturn getEmitterBus(@).publish(address, data, reply)\n\n# Private statis function for checking is the object has an emitter bus.\nhasEmitterBus = (obj) ->\n\treturn false unless obj._calamity\n\treturn false unless obj._calamity.emitter\n\treturn false unless obj._calamity.emitter.bus\n\treturn true\n\n# Private static function for preparing an on-demand event bus for an object.\ngetEmitterBus = (obj) ->\n\tcalamity = (obj._calamity or= {})\n\temitter = (calamity.emitter or= {})\n\treturn emitter.bus or= new EventBus()\n\n\n# ## `Calamity.emitter()`\n# Adds emitter functionality.\nC.emitter = (obj) ->\n\t_.extend obj, EmitterMixin.prototype\n","# # EventBridge\n#\n# Addresses used by Calamity to communicate with bridges:\n#\n# * `bus.subscribe`\n# * `bus.unsubscribe`\n# * `bus.publish`\n# * `bus.send`\n#\n# These will all supplied the following data:\n#\n# * For all:\n#    * `bus`\n# * For `bus.subscribe` and `bus.unsubscribe`@\n#    * `subscription`\n# * For `bus.publish` and `bus.send`:\n#    * `message`\n#\nEventBridge = class C.EventBridge\n\tC.emitter @prototype\n\n\tconstructor: ->\n\t\t# Nothing special here at the moment.\n","# # EventBus\n# Manages passing events from publishers to subscribers.\nEventBus = class C.EventBus\n\tconstructor: ->\n\t\t# Generate ID.\n\t\t@id = util.genId()\n\t\t# Registered subscriptions container.\n\t\t@_subscriptions = {}\n\t\t# Registered bridges container.\n\t\t@_bridges = []\n\n\t# ## `subscribe()`\n\t# Register a handler to an address.\n\tsubscribe: (address, handler, context) ->\n\t\t# Initialize subscriptions container for this address.\n\t\tunless @_subscriptions[address]\n\t\t\t@_subscriptions[address] = []\n\t\t# Create subscription.\n\t\tsub = new Subscription address, handler, context, @\n\t\t# Add to list.\n\t\t@_subscriptions[address].push sub\n\t\t# Send to bridges.\n\t\t@_bridgeProp \"subscribe\", subscription: sub\n\t\t# Return subscription.\n\t\treturn sub\n\n\t# ## `unsubscribe()`\n\t# Unsubscribes a handler.\n\tunsubscribe: (address, handler) ->\n\t\tsub = address\n\t\t# Search by subscription.\n\t\tif sub instanceof Subscription\n\t\t\t# Check address.\n\t\t\taddress = sub.address\n\t\t\treturn unless @_subscriptions[address]\n\t\t\tfor s, i in @_subscriptions[address]\n\t\t\t\tif s is sub\n\t\t\t\t\t@_subscriptions[address].splice i\n\t\t# Otherwise search by address and handler.\n\t\telse\n\t\t\t# Check for address.\n\t\t\treturn unless @_subscriptions[address]\n\t\t\tfor s, i in @_subscriptions[address]\n\t\t\t\tif s.address is address and s.handler is handler\n\t\t\t\t\tsub = s\n\t\t\t\t\t@_subscriptions[address].splice i\n\t\t# Send to bridges.\n\t\t@_bridgeProp \"unsubscribe\", subscription: sub\n\t\treturn\n\n\t# ## `publish()`\n\t# Publishes an event to a all subscribers on an address.\n\tpublish: (address, data, reply) ->\n\t\tmsg = @_createMessage address, data, reply\n\t\taddress = msg.address\n\t\t# Check if message has already been processed by this bus.\n\t\treturn @ if msg.sawBus @\n\t\t# Register this bus on the event\n\t\tmsg.addBus @\n\t\t# Publish to target address.\n\t\t@_publishAddress address, msg\n\t\t# Publish to wildcard address.\n\t\t@_publishAddress \"*\", msg\n\t\t# Send to bridges.\n\t\t@_bridgeProp \"publish\", message: msg\n\n\t\treturn @\n\n\t# ## `send()`\n\t# Sends an event to a single subscribed address.\n\t# Sends are sent to wildcard addresses, ever.\n\tsend: (address, data, reply) ->\n\t\tmsg = @_createMessage address, data, reply\n\t\taddress = msg.address\n\t\t# Check if message has already been processed by this bus.\n\t\treturn @ if msg.sawBus @\n\t\t# Register this bus on the event\n\t\tmsg.addBus @\n\t\t# Publish to target address.\n\t\t@_sendAddress address, msg\n\t\t# Send to bridges.\n\t\t@_bridgeProp \"send\", message: msg\n\n\t\treturn @\n\n\t# ## `bridge()`\n\t# Attached a bridge object to this bus.\n\t# Briges will receive information about everything that's going on.\n\tbridge: (bridge) ->\n\t\tthrow new Error \"Briges must extend Calamity.EventBridge\" unless bridge instanceof EventBridge\n\t\t@_bridges.push bridge unless _.contains @_bridges, bridge\n\t\treturn @\n\n\t# Utility function for creating messages.\n\t_createMessage: (address, data, reply) ->\n\t\t# Construct new EventMessage is necesarry.\n\t\tmsg = address\n\t\tunless msg instanceof EventMessage\n\t\t\tmsg = new EventMessage address, data, reply\n\t\treturn msg\n\n\t# Publishes a message to an address.\n\t_publishAddress: (address, msg) ->\n\t\t# Check if we have subscriptions at all for this address.\n\t\treturn unless @_subscriptions[address]\n\t\t# Send message to all subscriptions.\n\t\tfor subscription in @_subscriptions[address]\n\t\t\tsubscription.trigger msg\n\t\treturn\n\n\t# Sends a message to an address.\n\t_sendAddress: (address, msg) ->\n\t\t# Check if we have subscriptions at all for this address.\n\t\treturn unless @_subscriptions[address]\n\t\t# Send message to a single random subscription.\n\t\tsubs = @_subscriptions[address]\n\t\tlen = subs.length\n\t\ti = Math.floor(Math.random()*len)\n\t\tsubs[i].trigger msg\n\t\treturn\n\n\t# Propagates to all bridges.\n\t_bridgeProp: (type, data) ->\n\t\treturn unless @_bridges.length > 0\n\t\taddress = \"bus.#{type}\"\n\t\tdata.bus = @\n\t\tfor b in @_bridges\n\t\t\tb.trigger address, data\n\t\treturn\n","# # EventMessage\n# Represents a single message in the system.\nEventMessage = class C.EventMessage\n\t# Constructor.\n\tconstructor: (@address, @data = {}, replyHandler) ->\n\t\t# Generate ID.\n\t\t@id = util.genId()\n\t\t# Remebered busses container.\n\t\t# This will store the ID of every bus the event has seen, to prevent repeated execution.\n\t\t@_busses = []\n\t\t# Check reply handler.\n\t\tunless _.isUndefined(replyHandler) or _.isFunction(replyHandler)\n\t\t\tthrow new Error \"Reply must be a function\"\n\t\t@_replyHandler = replyHandler\n\t\t# Default values.\n\t\t@status = \"ok\"\n\t\t@error = null\n\n\t# ## `reply()`\n\t# Executes the reply handler, if this message has one.\n\treply: (data, replier) ->\n\t\treplyHandler = @_replyHandler\n\t\t# Don't do anything if we don't have a reply handler.\n\t\treturn unless _.isFunction(replyHandler)\n\t\t# Wrap data and further replies in another message.\n\t\tunless data instanceof EventMessage\n\t\t\tdata = new EventMessage null, data, replier\n\t\t# Execute.\n\t\treplyHandler data\n#\t\t_.defer ->\n#\t\t\treplyHandler data\n#\t\t\treturn\n\t\treturn @\n\n\t# ## `replyError()`\n\t# Executes the reply handler with an error instead of a reply.\n\treplyError: (error, data = {}) ->\n\t\t# Ensure meaningful serialization.\n\t\tif error instanceof Error\n\t\t\t# Transfer values to data.\n\t\t\tfor v in \"message,name,stack,fileName,lineNumber,description,number\".split(\",\")\n\t\t\t\tval = error[v]\n\t\t\t\tval = val.toString() if val and typeof val.toString is \"function\"\n\t\t\t\tdata[v] = val\n\t\t\tif typeof error.toString is \"function\"\n\t\t\t\tdata.string = error.toString()\n\t\t\t\terror = data.string\n\t\t\t\tif data.stack\n\t\t\t\t\terror += \" :: \" + data.stack\n\t\t# Create new error message.\n\t\tmsg = new EventMessage null, data\n\t\tmsg.status = \"error\"\n\t\tmsg.error = error\n\t\t# Send reply.\n\t\t@reply msg\n\t\treturn @\n\n\t# Automatically catches and propagates errors, removing the need to constantly check incoming messages for errors.\n\t# Example usage:\n\t#\n\t#     @send \"address\", (reply) => msg.catch reply, =>\n\t#         # your code here, reply will never be an error.\n\t#\n\t# In the above example, catch will check reply for errors, and pass them to the reply handler on msg.\n\t# If no errors are detected, it will execute the supplied handler inside a try/catch block, and pass\n\t# any errors back through msg.\n\t# If no reply handler exists on msg, errors will be rethrown, or no try/catch block will be used.\n\t# The first argument is optional and can be an EventMessage, or any throwable value.\n\t# If it's falsy, then it's simply ignored and handler is executed.\n\tcatch: (other, handler) ->\n\t\tunless handler?\n\t\t\tunless _.isFunction other\n\t\t\t\tthrow new Error \"Supplied handler is not a function, #{typeof other} supplied\"\n\t\t\thandler = other\n\t\t\tother = undefined\n\t\t# If we don't have a reply handler, throw error directly.\n\t\tunless _.isFunction @_replyHandler\n\t\t\t# Throw error if we have one.\n\t\t\tif other?\n\t\t\t\tif other instanceof EventMessage\n\t\t\t\t\tif other.isError()\n\t\t\t\t\t\tthrow other.error\n\t\t\t\telse\n\t\t\t\t\tother = new Error other unless other instanceof Error\n\t\t\t\t\tthrow other\n\t\t\t# Execute handler.\n\t\t\thandler other\n\t\t# If we have a reply handler, pass errors to it.\n\t\telse\n\t\t\t# Pass supplied errors.\n\t\t\tif other?\n\t\t\t\tif other instanceof EventMessage\n\t\t\t\t\tif other.isError()\n\t\t\t\t\t\t@reply other\n\t\t\t\t\t\treturn\n\t\t\t\telse\n\t\t\t\t\tother = new Error other unless other instanceof Error\n\t\t\t\t\t@replyError other\n\t\t\t\t\treturn\n\t\t\t# Execute handler inside try/catch block.\n\t\t\ttry\n\t\t\t\thandler other\n\t\t\tcatch err\n\t\t\t\t@replyError err\n\t\treturn\n\n\t# ## `isSuccess()`\n\t# Returns true if this message is marked successful, which is the default state.\n\tisSuccess: ->\n\t\treturn @status is \"ok\"\n\n\t# ## `isError()`\n\t# Returns true if this message is marked as errored, such as when replying with `replyError()`.\n\tisError: ->\n\t\treturn @status is \"error\"\n\n\t# Returns a parameter message data.\n\t# If the parameter is not present, `def` is returned.\n\tgetOptional: (param, def) ->\n\t\tparts = param.split \".\"\n\t\tval = @data[parts[0]]\n\t\t# Iterate from second element onwards.\n\t\tif parts.length > 1 then for part in parts.splice 1\n\t\t\tif _.isObject(val) and val[part]?\n\t\t\t\tval = val[part]\n\t\t\telse\n\t\t\t\tval = undefined\n\t\t\t\tbreak\n\t\t# Default.\n\t\tif typeof val is \"undefined\"\n\t\t\treturn def\n\t\treturn val\n\n\t# Returns a parameter message data.\n\t# If the parameter is not present, an error is thrown.\n\tgetRequired: (param) ->\n\t\tval = @getOptional param\n\t\tif typeof val is \"undefined\"\n\t\t\tthrow new Error \"Variable \\\"#{param}\\\" not found on message with address \\\"#{@address}\\\"\"\n\t\treturn val\n\n\t# ## `addBus()`\n\t# Adds a bus to the internal list.\n\taddBus: (bus) ->\n\t\treturn @ if @sawBus(bus)\n\t\t@_busses.push bus.id\n\t\treturn @\n\n\t# ## `sawBus()`\n\t# Returns true if this message has been processed by the supplied bus.\n\tsawBus: (bus) ->\n\t\treturn _.contains @_busses, bus.id\n\n\t# ## `toJSON()`\n\t# Converts the message to a plain JSON object for possible storage or transmission.\n\ttoJSON: ->\n\t\tjson =\n\t\t\tcalamity: C.version\n\t\t\taddress: @address\n\t\t\tdata: @data\n\t\t\tstatus: @status\n\t\t\terror: @error\n\t\tif @_replyHandler?\n\t\t\tjson.reply = _.bind @reply, @\n\t\treturn json\n\n\t# ## `fromJSON()`\n\t# Converts a JSON object to an EventMessage.\n\t# The message must have been serialized using `EventMessage`'s own `toJSON()` method, otherwise weird things could happen.\n\t@fromJSON = (json) ->\n\t\tthrow new Error \"JSON must be an object\" unless _.isObject json\n\t\tthrow new Error \"Serialized JSON is not for calamity: #{JSON.stringify(json)}\" unless json.calamity?\n\t\tmsg = new EventMessage json.address, json.data, json.reply\n\t\tmsg.status = json.status\n\t\tmsg.error = json.error\n\t\treturn msg\n","# # MemoryEventBridge\n# `EventBridge` implementation which ties to `EventBus` instances together directly in memory.\nMemoryEventBridge = class C.MemoryEventBridge extends EventBridge\n\t# ## `handler()`\n\t# Repeating handler implementation.\n\thandler: (msg) ->\n#\t\tconsole.log msg.serialize() + \"\\n\\n\"\n\t\t# Pass msg onto all connected busses\n\t\tfor bus in @_busses\n\t\t\tbus.publish msg\n\t\treturn\n","# # ProxyMixin\n# Mixin class for attaching global `EventBus` handling to objects.\n# It adds the `_subscribe()` and `_publish()` methods to the class, which automatically sets the context of any handler\n# to `this`.\nProxyMixin = class C.ProxyMixin\n\t# ## `_subscribe()`\n\t# Register a handler to an address with.\n\tsubscribe: (address, handler) ->\n\t\treturn @_calamity.proxy.bus.subscribe address, handler, @\n\n\t# ## `_publish()`\n\t# Publishes an event to an address.\n\tpublish: (address, data, reply) ->\n\t\treturn @_calamity.proxy.bus.publish address, data, reply\n\n\t# ## `send()`\n\t# Sends an event to a single handler on an address.\n\tsend: (address, data, reply) ->\n\t\treturn @_calamity.proxy.bus.send address, data, reply\n\n# We automatically construct a default global bus when needed.\nPROXY_GLOBAL_BUS = null\nC.global = ->\n\tPROXY_GLOBAL_BUS or= new EventBus()\n\treturn PROXY_GLOBAL_BUS\n\n# ## `Calamity.proxy()`\n# Adds proxy functionality.\nC.proxy = (obj, bus) ->\n\t# Prepare bus.\n\tunless bus instanceof EventBus\n\t\tbus = C.global()\n\t# Attach bus.\n\tc = (obj._calamity or= {})\n\tc.proxy =\n\t\tbus: bus\n\t# Extend.\n\t_.extend obj, ProxyMixin.prototype\n","# # Subscription\n# Represents a subscription of a handler to an address on an bus.\nSubscription = class C.Subscription\n\t# Constructor.\n\tconstructor: (@address, @handler, @context, @bus) ->\n\t\t@id = util.genId()\n\t\t@active = true\n\t\treturn\n\n\t# ## `unsubscribe()`\n\t# Shorthand for unsubscribing.\n\tunsubscribe: ->\n\t\treturn unless @active\n\t\t@bus.unsubscribe @\n\t\t@active = false\n\t\treturn @\n\n\t# ## `trigger()`\n\t# Fires the handler with the supplied message.\n\ttrigger: (msg) ->\n\t\treturn @ unless @active\n\t\t# Bind handler.\n\t\tbound = _.bind @handler, @context\n\t\t# Execute.\n\t\tbound msg\n#\t\t_.defer ->\n#\t\t\tbound msg\n#\t\t\treturn\n\n\t\treturn @\n","# # util\n# A set of utilities used inside Calamity.\n\n# Import Math functions.\nrandom = Math.random\nfloor = Math.floor\n\n# Hexadecimals.\nHEX = \"0123456789abcdef\".split \"\"\n\n# Generic utility functions.\nutil = C.util =\n\t# Generates a 128 bit ID.\n\tgenId: ->\n\t\tid = \"\"\n\t\tfor i in [1..32]\n\t\t\tid += HEX[floor(random() * HEX.length)]\n\t\treturn id\n"]}